"use client";
import React, { FC, useEffect, useState } from "react";
import CourseInformation from "./CourseInformation";
import CourseOptions from "./CourseOptions";
import CourseData from "./CourseData";
import CourseContent from "./CourseContent";
import CoursePreview from "./CoursePreview";
import {
  useEditCourseMutation,
  useGetAllCoursesQuery,
} from "../../../../redux/features/courses/coursesApi";
import { toast } from "react-hot-toast";
import { redirect } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import { CircularProgress } from "@mui/material";

type Props = {
  id: string;
  activeStep?: number;
  setActiveStep?: (active: number) => void;
};
import { motion, AnimatePresence } from "framer-motion";
import { CircularProgress, Alert } from "@mui/material";

type Props = {
  id: string;
  activeStep?: number;
  setActiveStep?: (active: number) => void;
};

const EditCourse: FC<Props> = ({ id, activeStep, setActiveStep }) => {
  const [editCourse, { isLoading, isSuccess, error }] = useEditCourseMutation();
  const { data, refetch, isLoading: isDataLoading } = useGetAllCoursesQuery(
    {},
    { refetchOnMountOrArgChange: true }
  );

  const editCourseData = data?.courses.find((i: any) => i._id === id);

  useEffect(() => {
    if (isSuccess) {
      toast.success("Course Updated successfully");
      redirect("/admin/courses");
    }
    if (error) {
      if ("data" in error) {
        const errorMessage = error as any;
        toast.error(errorMessage.data.message);
      }
    }
  }, [isSuccess, error]);

  // Use either the props or local state for active step
  const [localActive, setLocalActive] = useState(0);
  const active = activeStep !== undefined ? activeStep : localActive;
  const setActive = setActiveStep || setLocalActive;

  useEffect(() => {
    if (editCourseData) {
      setCourseInfo({
        name: editCourseData.name,
        description: editCourseData.description,
        price: editCourseData.price,
        estimatedPrice: editCourseData?.estimatedPrice,
        tags: editCourseData.tags,
        level: editCourseData.level,
        categories: editCourseData.categories,
        demoUrl: editCourseData.demoUrl,
        thumbnail: editCourseData?.thumbnail?.url,
      });
      setBenefits(editCourseData.benefits);
      setPrerequisites(editCourseData.prerequisites);
      setCourseContentData(editCourseData.courseData);
    }
  }, [editCourseData]);

  const [courseInfo, setCourseInfo] = useState<any>({
    name: "",
    description: "",
    price: "",
    estimatedPrice: "",
    tags: "",
    level: "",
    categories: "",
    demoUrl: "",
    thumbnail: "",
  });
  const [benefits, setBenefits] = useState([{ title: "" }]);
  const [prerequisites, setPrerequisites] = useState([{ title: "" }]);
  const [courseContentData, setCourseContentData] = useState([
    {
      videoUrl: "",
      title: "",
      description: "",
      videoSection: "Untitled Section",
      videoLength: "",
      links: [
        {
          title: "",
          url: "",
        },
      ],
      suggestion: "",
    },
  ]);

  const [courseData, setCourseData] = useState({});

  const handleSubmit = async () => {
    // Format benefits array
    const formattedBenefits = benefits.map((benefit) => ({
      title: benefit.title,
    }));
    // Format prerequisites array
    const formattedPrerequisites = prerequisites.map((prerequisite) => ({
      title: prerequisite.title,
    }));

    // Format course content array
    const formattedCourseContentData = courseContentData.map(
      (courseContent) => ({
        videoUrl: courseContent.videoUrl,
        title: courseContent.title,
        description: courseContent.description,
        videoSection: courseContent.videoSection,
        videoLength: courseContent.videoLength,
        links: courseContent.links.map((link) => ({
          title: link.title,
          url: link.url,
        })),
        suggestion: courseContent.suggestion,
      })
    );

    //   prepare our data object
    const data = {
      name: courseInfo.name,
      description: courseInfo.description,
      categories: courseInfo.categories,
      price: courseInfo.price,
      estimatedPrice: courseInfo.estimatedPrice,
      tags: courseInfo.tags,
      thumbnail: courseInfo.thumbnail,
      level: courseInfo.level,
      demoUrl: courseInfo.demoUrl,
      benefits: formattedBenefits,
      prerequisites: formattedPrerequisites,
      courseData: formattedCourseContentData,
    };

    setCourseData(data);
    return data; // Return the data for immediate use
  };

  const handleCourseCreate = async (e: any) => {
    if (!editCourseData) {
      toast.error("Course ID is missing. Cannot update course.");
      return;
    }
    if (!editCourseData._id) {
      toast.error("Course ID is missing. Cannot update course.");
      return;
    }
    
    // Make sure to call handleSubmit first to update courseData
    const formattedData = await handleSubmit();
    
    if (!isLoading) {
      await editCourse({ id: editCourseData._id, data: formattedData });
    }
  };

  // Animation variants
  const fadeInVariant = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  };

  if (isDataLoading) {
    return (
      <div className="flex justify-center items-center h-[70vh]">
        <CircularProgress />
        <p className="ml-2 text-gray-600 dark:text-gray-300">Loading course data...</p>
      </div>
    );
  }

  if (!editCourseData) {
    return (
      <div className="flex justify-center items-center h-[70vh]">
        <Alert severity="error" className="w-1/2">
          Course not found. Please check the course ID and try again.
        </Alert>
      </div>
    );
  }

  return (
    <motion.div 
      className="w-full flex min-h-screen"
      initial="hidden"
      animate="visible"
      variants={fadeInVariant}
    >
      <div className="w-[80%]">
        <AnimatePresence mode="wait">
          {active === 0 && (
            <motion.div
              key="course-info"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md"
            >
              <CourseInformation
                courseInfo={courseInfo}
                setCourseInfo={setCourseInfo}
                active={active}
                setActive={setActive}
              />
            </motion.div>
          )}

          {active === 1 && (
            <motion.div
              key="course-data"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md"
            >
              <CourseData
                benefits={benefits}
                setBenefits={setBenefits}
                prerequisites={prerequisites}
                setPrerequisites={setPrerequisites}
                active={active}
                setActive={setActive}
              />
            </motion.div>
          )}

          {active === 2 && (
            <motion.div
              key="course-content"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md"
            >
              <CourseContent
                active={active}
                setActive={setActive}
                courseContentData={courseContentData}
                setCourseContentData={setCourseContentData}
                handleSubmit={handleSubmit}
              />
            </motion.div>
          )}

          {active === 3 && (
            <motion.div
              key="course-preview"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md"
            >
              <CoursePreview
                courseData={editCourseData}
                handleCourseCreate={handleCourseCreate}
                setActive={setActive}
                active={active}
                isEdit={true}
              />
              {isLoading && (
                <div className="flex justify-center mt-4">
                  <CircularProgress size={30} color="primary" />
                  <span className="ml-2 text-purple-600 dark:text-purple-400">Updating your course...</span>
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
      
      <div className="w-[20%] mt-[100px] h-screen fixed z-10 top-18 right-0">
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.3, duration: 0.5 }}
          className="p-4 bg-white dark:bg-gray-800 rounded-lg mr-4 shadow-lg"
        >
          <CourseOptions active={active} setActive={setActive} />
        </motion.div>
      </div>
    </motion.div>
  );
};

export default EditCourse;
